# Default values for observability-agent
# This is a YAML-formatted file.

# Global settings
global:
  # Image registry and repository prefix for all images
  imageRegistry: ""
  # Pull policy for all images
  imagePullPolicy: "IfNotPresent"
  # Image pull secrets for private registries
  imagePullSecrets: []

# OpenAI API settings
openai:
  # API key for OpenAI (required)
  apiKey: "YOUR_OPENAI_API_KEY"
  # Model to use (default: gpt-4)
  model: "gpt-4o-mini"

# NATS service configuration
nats:
  enabled: true
  image:
    repository: nats
    tag: "2.10-alpine"
    pullPolicy: IfNotPresent
  jetstream:
    # Enable JetStream file storage (recommended for production)
    enabled: true
  persistence:
    # Persistence settings for NATS
    enabled: false  # Disabled for local development - change to true for production
    # Storage size for NATS persistence
    size: 1Gi
    # Alternatively, use memory storage (faster but non-persistent)
    memStorage: 1G
    storageClass: ""  # Use default storage class
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi

# Redis configuration (disabled by default as we're now using NATS)
redis:
  enabled: false
  image:
    repository: redis
    tag: "7.0-alpine"
    pullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi

# Qdrant configuration
qdrant:
  # Whether to deploy Qdrant as part of this chart
  enabled: true
  # Use external Qdrant instance
  external:
    enabled: false
    url: http://qdrant:6333
  # Qdrant image configuration
  image:
    repository: qdrant/qdrant
    tag: "v1.5.0"
  # Qdrant resource requests and limits
  resources:
    requests:
      memory: "256Mi"
      cpu: "200m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  # Qdrant persistence settings
  persistence:
    enabled: true
    size: 1Gi
    storageClass: ""
  # Qdrant service configuration
  service:
    type: ClusterIP
    port: 6333
  # Qdrant API configuration
  api:
    port: 6333
    grpcPort: 6334
  # Qdrant settings
  settings:
    storage:
      # Enable snapshot creation
      snapshot:
        enabled: true
        interval: 24h
      # Enable payload indexing
      payloadIndexing:
        enabled: true
    # Enable telemetry
    telemetry:
      enabled: false

# Common settings for all agents
agents:
  # Registry and repository for agent images
  imageRegistry: ""
  # Common environment variables for all agents
  env:
    - name: PYTHONUNBUFFERED
      value: "1"
  # Common resource settings
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "200m"
  # Agent enablement configuration
  enabled:
    metric: true
    log: true
    deployment: true
    tracing: true
    rootCause: true
    runbook: true
    notification: true
    postmortem: true

# Orchestrator configuration
orchestrator:
  # Number of replicas to run
  replicas: 1
  # Image settings
  image:
    repository: observability-agent-orchestrator
    tag: latest
  # Service settings
  service:
    type: ClusterIP
    port: 80
  # Resource settings
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "200m"
  # Additional environment variables
  env: []

# Metric Agent configuration
metricAgent:
  # Number of replicas to run
  replicas: 1
  # Image settings
  image:
    repository: observability-agent-metric-agent
    tag: latest
  # Resource settings
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "200m"
  # Additional environment variables
  env: []
  # Prometheus settings
  prometheus:
    url: "http://prometheus-server.monitoring:9090"

# Log Agent configuration
logAgent:
  # Number of replicas to run
  replicas: 1
  # Image settings
  image:
    repository: observability-agent-log-agent
    tag: latest
  # Resource settings
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "200m"
  # Additional environment variables
  env: []
  # Loki settings
  loki:
    url: "http://loki-gateway.monitoring:3100"

# Deployment Agent configuration
deploymentAgent:
  # Number of replicas to run
  replicas: 1
  # Image settings
  image:
    repository: observability-agent-deployment-agent
    tag: latest
  # Resource settings
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "200m"
  # Additional environment variables
  env: []
  # ArgoCD settings
  argocd:
    url: "https://argocd-server.argocd:443"
    insecure: true
  # Git repository path
  gitRepoPath: /app/repo

# Root Cause Agent configuration
rootCauseAgent:
  # Number of replicas to run
  replicas: 1
  # Image settings
  image:
    repository: observability-agent-root-cause-agent
    tag: latest
  # Resource settings
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "200m"
  # Additional environment variables
  env: []

# Tracing Agent configuration
tracingAgent:
  # Number of replicas to run
  replicas: 1
  # Image settings
  image:
    repository: observability-agent-tracing-agent
    tag: latest
  # Resource settings
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "200m"
  # Additional environment variables
  env: []
  # Tempo settings
  tempo:
    url: "http://tempo:3100"

# Runbook Agent configuration
runbookAgent:
  # Number of replicas to run
  replicas: 1
  # Image settings
  image:
    repository: observability-agent-runbook-agent
    tag: latest
  # Resource settings
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "200m"
  # Additional environment variables
  env: []

# Notification Agent configuration
notificationAgent:
  # Number of replicas to run
  replicas: 1
  # Image settings
  image:
    repository: observability-agent-notification-agent
    tag: latest
  # Resource settings
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  # Additional environment variables
  env: []

# Postmortem Agent configuration
postmortemAgent:
  # Number of replicas to run
  replicas: 1
  # Image settings
  image:
    repository: observability-agent-postmortem-agent
    tag: latest
  # Resource settings
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  # Additional environment variables
  env: []

# Knowledge base configuration
knowledgeBase:
  qdrant:
    url: http://qdrant:6333
  postmortemTemplateDir: /app/templates
  runbookDir: /app/runbooks

# UI Backend configuration
uiBackend:
  # Number of replicas to run
  replicas: 1
  # Image settings
  image:
    repository: observability-agent-ui-backend
    tag: latest
  # Service settings
  service:
    type: ClusterIP
    port: 5000
  # Resource settings
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "200m"
  # Additional environment variables
  env: []

# UI configuration
ui:
  # Number of replicas to run
  replicas: 1
  # Image settings
  image:
    repository: observability-agent-ui
    tag: latest
  # Service settings
  service:
    type: ClusterIP
    port: 80
  # Resource settings
  resources:
    requests:
      memory: "64Mi"
      cpu: "50m"
    limits:
      memory: "128Mi"
      cpu: "100m"
  # Additional environment variables
  env: []

# MongoDB configuration
mongodb:
  # Whether to deploy MongoDB as part of this chart
  enabled: true
  # MongoDB image configuration
  image:
    repository: mongo
    tag: "6.0"
    pullPolicy: IfNotPresent
  # MongoDB resource requests and limits
  resources:
    requests:
      memory: "256Mi"
      cpu: "200m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  # MongoDB persistence settings
  persistence:
    enabled: true
    size: 1Gi
    storageClass: ""

# K8s Command Backend configuration
k8sCommandBackend:
  # Number of replicas to run
  replicas: 1
  # Image settings
  image:
    repository: observability-agent-k8s-command-backend
    tag: latest
  # Service settings
  service:
    type: ClusterIP
    port: 5002
  # Resource settings
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "200m"
  # MongoDB settings
  mongodb:
    uri: ""  # If empty, will use the MongoDB deployed by this chart
  # Persistence settings
  persistence:
    enabled: true
    size: 1Gi
    storageClass: ""
  # Additional environment variables
  env: []